[{"/Users/vidyas/Downloads/IIT_Courses/Fall_2021/CSP_584_EWA/Assignments/Bonus_Assign_2/Bonus_Assignment_2_Sudharshana, Vidya/Chicago_SocialHub_React/frontend_react/src/index.js":"1","/Users/vidyas/Downloads/IIT_Courses/Fall_2021/CSP_584_EWA/Assignments/Bonus_Assign_2/Bonus_Assignment_2_Sudharshana, Vidya/Chicago_SocialHub_React/frontend_react/src/reportWebVitals.js":"2","/Users/vidyas/Downloads/IIT_Courses/Fall_2021/CSP_584_EWA/Assignments/Bonus_Assign_2/Bonus_Assignment_2_Sudharshana, Vidya/Chicago_SocialHub_React/frontend_react/src/App.js":"3","/Users/vidyas/Downloads/IIT_Courses/Fall_2021/CSP_584_EWA/Assignments/Bonus_Assign_2/Bonus_Assignment_2_Sudharshana, Vidya/Chicago_SocialHub_React/frontend_react/src/routes/route.js":"4","/Users/vidyas/Downloads/IIT_Courses/Fall_2021/CSP_584_EWA/Assignments/Bonus_Assign_2/Bonus_Assignment_2_Sudharshana, Vidya/Chicago_SocialHub_React/frontend_react/src/routes/index.js":"5","/Users/vidyas/Downloads/IIT_Courses/Fall_2021/CSP_584_EWA/Assignments/Bonus_Assign_2/Bonus_Assignment_2_Sudharshana, Vidya/Chicago_SocialHub_React/frontend_react/src/components/listOfPlaces.js":"6","/Users/vidyas/Downloads/IIT_Courses/Fall_2021/CSP_584_EWA/Assignments/Bonus_Assign_2/Bonus_Assignment_2_Sudharshana, Vidya/Chicago_SocialHub_React/frontend_react/src/components/smaChart.js":"7","/Users/vidyas/Downloads/IIT_Courses/Fall_2021/CSP_584_EWA/Assignments/Bonus_Assign_2/Bonus_Assignment_2_Sudharshana, Vidya/Chicago_SocialHub_React/frontend_react/src/components/find.js":"8","/Users/vidyas/Downloads/IIT_Courses/Fall_2021/CSP_584_EWA/Assignments/Bonus_Assign_2/Bonus_Assignment_2_Sudharshana, Vidya/Chicago_SocialHub_React/frontend_react/src/components/listOfStations.js":"9","/Users/vidyas/Downloads/IIT_Courses/Fall_2021/CSP_584_EWA/Assignments/Bonus_Assign_2/Bonus_Assignment_2_Sudharshana, Vidya/Chicago_SocialHub_React/frontend_react/src/components/realtimeChart.js":"10","/Users/vidyas/Downloads/IIT_Courses/Fall_2021/CSP_584_EWA/Assignments/Bonus_Assign_2/Bonus_Assignment_2_Sudharshana, Vidya/Chicago_SocialHub_React/frontend_react/src/components/heatmap.js":"11","/Users/vidyas/Downloads/IIT_Courses/Fall_2021/CSP_584_EWA/Assignments/Bonus_Assign_2/Bonus_Assignment_2_Sudharshana, Vidya/Chicago_SocialHub_React/frontend_react/src/components/divvyTripsChart.js":"12","/Users/vidyas/Downloads/IIT_Courses/Fall_2021/CSP_584_EWA/Assignments/Bonus_Assign_2/Bonus_Assignment_2_Sudharshana, Vidya/Chicago_SocialHub_React/frontend_react/src/components/yelpReviewChart.js":"13","/Users/vidyas/Downloads/IIT_Courses/Fall_2021/CSP_584_EWA/Assignments/Bonus_Assign_2/Bonus_Assignment_2_Sudharshana, Vidya/Chicago_SocialHub_React/frontend_react/src/components/header.js":"14","/Users/vidyas/Downloads/IIT_Courses/Fall_2021/CSP_584_EWA/Assignments/Bonus_Assign_2/Bonus_Assignment_2_Sudharshana, Vidya/Chicago_SocialHub_React/frontend_react/src/components/covideHeatMap.js":"15"},{"size":546,"mtime":1638189218000,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":1636690361000,"results":"18","hashOfConfig":"17"},{"size":480,"mtime":1638795601000,"results":"19","hashOfConfig":"17"},{"size":265,"mtime":1636698485000,"results":"20","hashOfConfig":"17"},{"size":1191,"mtime":1638998398773,"results":"21","hashOfConfig":"17"},{"size":5482,"mtime":1638928706839,"results":"22","hashOfConfig":"17"},{"size":15697,"mtime":1638996486088,"results":"23","hashOfConfig":"17"},{"size":3186,"mtime":1638902852000,"results":"24","hashOfConfig":"17"},{"size":15258,"mtime":1638998984272,"results":"25","hashOfConfig":"17"},{"size":8156,"mtime":1638996465941,"results":"26","hashOfConfig":"17"},{"size":5836,"mtime":1639009052280,"results":"27","hashOfConfig":"17"},{"size":23286,"mtime":1638937344822,"results":"28","hashOfConfig":"17"},{"size":4004,"mtime":1638928964574,"results":"29","hashOfConfig":"17"},{"size":1677,"mtime":1638093773000,"results":"30","hashOfConfig":"17"},{"size":5735,"mtime":1639093161450,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"q4zvgx",{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"34"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/vidyas/Downloads/IIT_Courses/Fall_2021/CSP_584_EWA/Assignments/Bonus_Assign_2/Bonus_Assignment_2_Sudharshana, Vidya/Chicago_SocialHub_React/frontend_react/src/index.js",[],["69","70"],"/Users/vidyas/Downloads/IIT_Courses/Fall_2021/CSP_584_EWA/Assignments/Bonus_Assign_2/Bonus_Assignment_2_Sudharshana, Vidya/Chicago_SocialHub_React/frontend_react/src/reportWebVitals.js",[],"/Users/vidyas/Downloads/IIT_Courses/Fall_2021/CSP_584_EWA/Assignments/Bonus_Assign_2/Bonus_Assignment_2_Sudharshana, Vidya/Chicago_SocialHub_React/frontend_react/src/App.js",[],"/Users/vidyas/Downloads/IIT_Courses/Fall_2021/CSP_584_EWA/Assignments/Bonus_Assign_2/Bonus_Assignment_2_Sudharshana, Vidya/Chicago_SocialHub_React/frontend_react/src/routes/route.js",[],"/Users/vidyas/Downloads/IIT_Courses/Fall_2021/CSP_584_EWA/Assignments/Bonus_Assign_2/Bonus_Assignment_2_Sudharshana, Vidya/Chicago_SocialHub_React/frontend_react/src/routes/index.js",[],"/Users/vidyas/Downloads/IIT_Courses/Fall_2021/CSP_584_EWA/Assignments/Bonus_Assign_2/Bonus_Assignment_2_Sudharshana, Vidya/Chicago_SocialHub_React/frontend_react/src/components/listOfPlaces.js",[],"/Users/vidyas/Downloads/IIT_Courses/Fall_2021/CSP_584_EWA/Assignments/Bonus_Assign_2/Bonus_Assignment_2_Sudharshana, Vidya/Chicago_SocialHub_React/frontend_react/src/components/smaChart.js",["71","72","73","74","75","76"],"import React, { Component } from \"react\";\nimport { Row, Col, Button, Input} from \"reactstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faArrowLeft, faChartBar, faHome } from \"@fortawesome/free-solid-svg-icons\";\nimport Header from \"./header\";\nimport { Table } from \"reactstrap\"\nimport {Redirect} from 'react-router-dom'\nimport { Line } from \"react-chartjs-2\";\n\nfunction movingAverage(data, hourinterval) {\n    var arr = []\n    data.map((row, index, total) => {\n\n        const endindex = total.length - index - 1\n        var startindex = endindex\n        const endtime = total[endindex].lastCommunicationTime\n        var starttime = new Date(endtime)\n        starttime.setHours(starttime.getHours() - hourinterval)\n        var timelimit = new Date(total[total.length - 1].lastCommunicationTime)\n        timelimit.setHours(timelimit.getHours() - 168);\n        var lastCommTime = total[startindex].lastCommunicationTime.toString();\n        var lastCommTime_Date = new Date(lastCommTime);\n        var end_time = total[endindex].lastCommunicationTime.toString();\n        var end_time_Date = new Date(end_time);\n        var sum = 0\n        var count = 0\n        while (total[startindex] != undefined && lastCommTime_Date > starttime) {\n            sum += total[startindex].availableDocks\n            count++\n            startindex--\n        }\n        if (end_time_Date > timelimit) {\n            var avg = sum / count\n            if (total[startindex] != undefined) {\n                startindex++\n            }\n            arr.push({ lastCommunicationTime: total[endindex].lastCommunicationTime, availableDocks: avg })\n        }\n    });\n    // console.log(\"hello.....+++++++++++\", arr);\n\n    return arr;\n}\n\n\nclass SMAChart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            moveToHome: false,\n            movetoStations: false,\n            stations: [],\n            data: {\n                labels: [\"Time\"],\n                datasets: [\n                  {\n                    label: 'Real-Time Data',\n                    fill: false,\n                    lineTension: 0.1,\n                    data: [65, 59, 80],\n                    backgroundColor: 'rgb(255, 165, 0)',\n                    borderColor: 'rgba(255, 165, 0)',\n                  },\n                  {\n                    label: 'SMA 1-hour',\n                    fill: false,\n                    lineTension: 0.1,\n                    data: [40, 0.5,0.2],\n                    backgroundColor: 'green',\n                    borderColor: 'green',\n                  },\n                  {\n                    label: 'SMA 24-hour',\n                    fill: false,\n                    lineTension: 0.1,\n                    data: [20, 0, 0.8],\n                    backgroundColor: 'red',\n                    borderColor: 'red',\n                  },\n                ],\n                hour: '1 HOUR'\n            }\n        }\n    }\n\n    componentDidMount() {\n        let comp = this\n        let realTimeChartData =  this.props.location.state.realTimeChartData\n        let sma1ChartData =  this.props.location.state.sma1ChartData\n        let sma24ChartData =  this.props.location.state.sma24ChartData\n\n        let labels = []\n        let availableDocks = []\n        let sma1Value = []\n        let sma24Value = []\n\n        for (let i=0; i< realTimeChartData.length; i++) {\n            labels.push(realTimeChartData[i].lastCommunicationTime.toString().substring(11, 19))\n            availableDocks.push(realTimeChartData[i].availableDocks)\n        }\n\n        for (let i=0; i< sma1ChartData.length; i++) {\n            sma1Value.push(sma1ChartData[i].availableDocks)\n        }\n\n        for (let i=0; i< sma24ChartData.length; i++) {\n            sma24Value.push(sma24ChartData[i].availableDocks)\n        }\n\n        labels.reverse()\n        availableDocks.reverse()\n        sma1Value.reverse()\n        sma24Value.reverse()\n\n        comp.setState({\n            data: {\n                labels: labels,\n                datasets: [\n                  {\n                    label: 'Real-Time Data',\n                    fill: false,\n                    lineTension: 0.1,\n                    data: availableDocks,\n                    backgroundColor: 'rgb(255, 165, 0)',\n                    borderColor: 'rgba(255, 165, 0)',\n                    backgroundColor: 'rgb(255, 165, 0)',\n                    borderCapStyle: 'butt',\n                    borderDash: [],\n                    borderDashOffset: 0.0,\n                    borderJoinStyle: 'miter',\n                    pointBorderColor: '#3DAA1D',\n                    pointBackgroundColor: '#fff',\n                    pointBorderWidth: 1,\n                    pointHoverRadius: 5,\n                    pointHoverBackgroundColor: '#3DAA1D',\n                    pointHoverBorderColor: 'rgba(220,220,220,1)',\n                    pointHoverBorderWidth: 2,\n                    pointRadius: 1,\n                    pointHitRadius: 10,\n                  },\n                  {\n                    label: 'SMA 1-hour',\n                    fill: false,\n                    lineTension: 0.1,\n                    data: sma1Value,\n                    backgroundColor: 'blue',\n                    borderColor: 'blue',\n                    borderCapStyle: 'butt',\n                    borderDash: [],\n                    borderDashOffset: 0.0,\n                    borderJoinStyle: 'miter',\n                    pointBorderColor: '#3DAA1D',\n                    pointBackgroundColor: '#fff',\n                    pointBorderWidth: 1,\n                    pointHoverRadius: 5,\n                    pointHoverBackgroundColor: '#3DAA1D',\n                    pointHoverBorderColor: 'rgba(220,220,220,1)',\n                    pointHoverBorderWidth: 2,\n                    pointRadius: 1,\n                    pointHitRadius: 10,\n                  },\n                  {\n                    label: 'SMA 24-hour',\n                    fill: false,\n                    lineTension: 0.1,\n                    data: sma24Value,\n                    backgroundColor: 'red',\n                    borderColor: 'red',\n                    borderCapStyle: 'butt',\n                    borderDash: [],\n                    borderDashOffset: 0.0,\n                    borderJoinStyle: 'miter',\n                    pointBorderColor: '#3DAA1D',\n                    pointBackgroundColor: '#fff',\n                    pointBorderWidth: 1,\n                    pointHoverRadius: 5,\n                    pointHoverBackgroundColor: '#3DAA1D',\n                    pointHoverBorderColor: 'rgba(220,220,220,1)',\n                    pointHoverBorderWidth: 2,\n                    pointRadius: 1,\n                    pointHitRadius: 10,\n                  },\n                ],\n            }\n        })\n    }\n\n    handleHourChange(e) {\n        let value = e.target.value\n        let comp = this\n\n        var axios = require('axios');\n        var data = JSON.stringify({\n        \"placeName\": this.props.location.state.stationName,\n        \"timeRange\": value\n        });\n\n        var config = {\n        method: 'post',\n        url: 'http://localhost:4000/stations/getdocks',\n        headers: { \n            'Content-Type': 'application/json'\n        },\n        data : data\n        };\n\n        axios(config)\n        .then(function (response) {\n        // console.log(JSON.stringify(response.data));\n        let sma1 = movingAverage(response.data, 1)\n        let sma24 = movingAverage(sma1, 24)\n\n\n\n        let labels = []\n        let availableDocks = []\n        let sma1Value = []\n        let sma24Value = []\n\n        for (let i=0; i< response.data.length; i++) {\n            labels.push(response.data[i].lastCommunicationTime.toString().substring(11, 19))\n            availableDocks.push(response.data[i].availableDocks)\n        }\n\n        for (let i=0; i< sma1.length; i++) {\n            sma1Value.push(sma1[i].availableDocks)\n        }\n\n        for (let i=0; i< sma24.length; i++) {\n            sma24Value.push(sma24[i].availableDocks)\n        }\n\n        labels.reverse()\n        availableDocks.reverse()\n        // sma1Value.reverse()\n        sma24Value.reverse()\n\n\n        comp.setState({\n            data: {\n                labels: labels,\n                datasets: [\n                  {\n                    label: 'Real-Time Data',\n                    fill: false,\n                    lineTension: 0.1,\n                    data: availableDocks,\n                    backgroundColor: 'rgb(255, 165, 0)',\n                    borderColor: 'rgba(255, 165, 0)',\n                    borderCapStyle: 'butt',\n                    borderDash: [],\n                    borderDashOffset: 0.0,\n                    borderJoinStyle: 'miter',\n                    pointBorderColor: '#3DAA1D',\n                    pointBackgroundColor: '#fff',\n                    pointBorderWidth: 1,\n                    pointHoverRadius: 5,\n                    pointHoverBackgroundColor: '#3DAA1D',\n                    pointHoverBorderColor: 'rgba(220,220,220,1)',\n                    pointHoverBorderWidth: 2,\n                    pointRadius: 1,\n                    pointHitRadius: 10,\n                  },\n                  {\n                    label: 'SMA 1-hour',\n                    fill: false,\n                    lineTension: 0.1,\n                    data: sma1Value,\n                    backgroundColor: 'blue',\n                    borderColor: 'blue',\n                    borderCapStyle: 'butt',\n                    borderDash: [],\n                    borderDashOffset: 0.0,\n                    borderJoinStyle: 'miter',\n                    pointBorderColor: '#3DAA1D',\n                    pointBackgroundColor: '#fff',\n                    pointBorderWidth: 1,\n                    pointHoverRadius: 5,\n                    pointHoverBackgroundColor: '#3DAA1D',\n                    pointHoverBorderColor: 'rgba(220,220,220,1)',\n                    pointHoverBorderWidth: 2,\n                    pointRadius: 1,\n                    pointHitRadius: 10,\n                  },\n                  {\n                    label: 'SMA 24-hour',\n                    fill: false,\n                    lineTension: 0.1,\n                    data: sma24Value,\n                    backgroundColor: 'red',\n                    borderColor: 'red',\n                    borderCapStyle: 'butt',\n                    borderDash: [],\n                    borderDashOffset: 0.0,\n                    borderJoinStyle: 'miter',\n                    pointBorderColor: '#3DAA1D',\n                    pointBackgroundColor: '#fff',\n                    pointBorderWidth: 1,\n                    pointHoverRadius: 5,\n                    pointHoverBackgroundColor: '#3DAA1D',\n                    pointHoverBorderColor: 'rgba(220,220,220,1)',\n                    pointHoverBorderWidth: 2,\n                    pointRadius: 1,\n                    pointHitRadius: 10,\n                  },\n                ],\n            }\n        })\n        })\n        .catch(function (error) {\n        console.log(error);\n        });\n    }\n\n    moveToHomePage() {\n        this.setState({\n            moveToHome: true\n        })\n    }\n\n    moveToListOfStations() {\n        this.setState({\n            movetoStations: true\n        })\n    }\n\n    handleChange(e) {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                {this.state.moveToHome? <Redirect to = \"/find\" />: null}\n                {this.state.movetoStations? <Redirect to = {{\n                    pathname: \"/list_of_stations\",\n                    state: { stations: this.props.location.state.stations, places: this.props.location.state.places, find: this.props.location.state.find, where: this.props.location.state.where} \n                }} \n                /> :null }\n                <Header />\n                <div style = {{textAlign: \"left\"}}>\n                    <Row>\n                        <Col md = {2} style = {{padding: \"20px\"}}>\n                            <Button style = {{backgroundColor: \"#191970\"}} onClick = {this.moveToHomePage.bind(this)}>Home<span style = {{marginLeft: \"10px\"}}><FontAwesomeIcon icon = {faHome} /></span></Button>\n                        </Col>\n                        <Col md = {8}></Col>\n                        <Col md = {2} style = {{padding: \"20px\"}}>\n                            <Button style = {{backgroundColor: \"#191970\"}} onClick = {this.moveToListOfStations.bind(this)}>Go Back <span style = {{marginLeft: \"10px\"}}><FontAwesomeIcon icon = {faArrowLeft} /></span></Button>\n                        </Col>\n                    </Row>\n\n                    <Row>\n                        <Col md = {2} style = {{padding: \"20px\"}}>\n                            <Input type = \"select\" value = {this.state.hour} style = {{border: \"none\", borderBottom: \"1px solid black\"}} name=\"hour\" onChange = {this.handleHourChange.bind(this)}  placeholder = \"Hour\">\n                                <option value = \"1 HOUR\">Past Hour</option>\n                                <option value = \"24 HOUR\">Last 24 Hours</option>\n                                <option value = \"7 DAY\">Last 7 Days</option>\n                            </Input>\n                        </Col>\n                    </Row>\n\n                     <div>\n                     <div style = {{padding: \"20px\"}}>\n                     <h6>Divvy Dock Station: {this.props.location.state.stationName}</h6>\n\n                    <Row>\n                        <Col md = {8} xs = {12}>\n                        <div>\n                            <Line\n                            data = {this.state.data}\n                            // Height of graph\n                            height={600}\n                            options={{\n                                maintainAspectRatio: false,\n                                scales: {\n                                yAxes: [\n                                    {\n                                        scaleLabel: {\n                                            display: true,\n                                            labelString: 'Available Docks'\n                                        },\n                                        ticks: {\n                                            beginAtZero: true,\n                                        },\n                                        gridLines: {\n                                            display: true\n                                        },\n                                    },\n                                    \n                                ],\n                                xAxes: [\n                                    {\n                                        scaleLabel: {\n                                            display: true,\n                                            labelString: 'Time'\n                                        },\n                                        gridLines: {\n                                            display: true\n                                        },\n                                    }\n                                ]\n                                },\n                                legend: {\n                                labels: {\n                                    fontSize: 15,\n                                },\n                                },\n                            }}\n                            />\n                        </div>\n                        </Col>\n                    </Row>\n                    \n                    </div>\n                    </div>\n                </div >\n            </div>\n\n        );\n    }\n}\n\nexport default (SMAChart);","/Users/vidyas/Downloads/IIT_Courses/Fall_2021/CSP_584_EWA/Assignments/Bonus_Assign_2/Bonus_Assignment_2_Sudharshana, Vidya/Chicago_SocialHub_React/frontend_react/src/components/find.js",[],"/Users/vidyas/Downloads/IIT_Courses/Fall_2021/CSP_584_EWA/Assignments/Bonus_Assign_2/Bonus_Assignment_2_Sudharshana, Vidya/Chicago_SocialHub_React/frontend_react/src/components/listOfStations.js",["77","78","79","80"],"import React, { Component } from \"react\";\nimport { Row, Col, Button, Card} from \"reactstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faArrowLeft, faArrowUp, faBicycle, faChartLine, faHome } from \"@fortawesome/free-solid-svg-icons\";\nimport Header from \"./header\";\nimport { Table } from \"reactstrap\"\nimport {\n    withScriptjs,\n    withGoogleMap,\n    GoogleMap,\n    Marker,\n    InfoWindow\n} from 'react-google-maps';\nimport { compose, withProps } from 'recompose';\nimport {Redirect} from 'react-router-dom'\n\nconst heatMapData = [\n    {lat: 41.884728, lng: -87.668597},\n {lat: 41.77599, lng: -87.668597},\n {lat: 41.77599, lng: -87.668597},\n {lat: 41.77599, lng: -87.668597},\n {lat: 41.850321, lng: -87.717446},\n {lat: 41.850321, lng: -87.717446},\n {lat: 41.777061, lng: -87.711565},\n {lat: 41.777061, lng: -87.711565},\n {lat: 41.777061, lng: -87.711565},\n {lat: 41.777061, lng: -87.711565},\n {lat: 41.777061, lng: -87.711565},\n {lat: 41.777061, lng: -87.711565},\n {lat: 41.777061, lng: -87.711565},\n {lat: 41.776931, lng: -87.638812},\n {lat: 41.776931, lng: -87.638812},\n {lat: 41.776931, lng: -87.638812},\n {lat: 41.881113, lng: -87.756863},\n {lat: 41.901964, lng: -87.741017},\n {lat: 41.901964, lng: -87.741017},\n {lat: 41.901964, lng: -87.741017},\n {lat: 41.810038, lng: -87.711251},\n];\n\nconst covideHeatmapData = [\n    {lat: 41.77599, lng: -87.668597},\n     {lat: 41.77599, lng: -87.668597},\n     {lat: 41.77599, lng: -87.668597},\n     {lat: 41.77599, lng: -87.668597},\n     {lat: 41.850321, lng: -87.717446},\n     {lat: 41.850321, lng: -87.717446},\n     {lat: 41.777061, lng: -87.711565},\n     {lat: 41.777061, lng: -87.711565},\n     {lat: 41.777061, lng: -87.711565},\n     {lat: 41.777061, lng: -87.711565},\n     {lat: 41.777061, lng: -87.711565},\n     {lat: 41.777061, lng: -87.711565},\n     {lat: 41.777061, lng: -87.711565},\n     {lat: 41.776931, lng: -87.638812},\n     {lat: 41.776931, lng: -87.638812},\n     {lat: 41.776931, lng: -87.638812},\n     {lat: 41.881113, lng: -87.756863},\n     {lat: 41.901964, lng: -87.741017},\n     {lat: 41.901964, lng: -87.741017},\n     {lat: 41.901964, lng: -87.741017},\n     {lat: 41.810038, lng: -87.711251},\n    ];\n\nfunction movingAverage(data, hourinterval) {\n    var arr = []\n    data.map((row, index, total) => {\n\n        const endindex = total.length - index - 1\n        var startindex = endindex\n        const endtime = total[endindex].lastCommunicationTime\n        var starttime = new Date(endtime)\n        starttime.setHours(starttime.getHours() - hourinterval)\n        var timelimit = new Date(total[total.length - 1].lastCommunicationTime)\n        timelimit.setHours(timelimit.getHours() - 168);\n        var lastCommTime = total[startindex].lastCommunicationTime.toString();\n        var lastCommTime_Date = new Date(lastCommTime);\n        var end_time = total[endindex].lastCommunicationTime.toString();\n        var end_time_Date = new Date(end_time);\n        var sum = 0\n        var count = 0\n        while (total[startindex] != undefined && lastCommTime_Date > starttime) {\n            sum += total[startindex].availableDocks\n            count++\n            startindex--\n        }\n        if (end_time_Date > timelimit) {\n            var avg = sum / count\n            if (total[startindex] != undefined) {\n                startindex++\n            }\n            arr.push({ lastCommunicationTime: total[endindex].lastCommunicationTime, availableDocks: avg })\n        }\n    });\n    console.log(\"hello.....+++++++++++\", arr);\n\n    return arr;\n}\n\n\n\nclass ListofStations extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            moveToHome: false,\n            moveToPlace: false,\n            moveToHeatMap: false,\n            moveToCovidHeatMap: false,\n            moveToDivvyTripsChart: false,\n            moveToRealTimeChart: false,\n            moveToSmaChart: false,\n            markerLatitude: 41.882607,\n            markerLongitude: -87.643548,\n            label: 'You are Here',\n            realTimeChartData: [],\n            sma1ChartData: [],\n            sma24ChartData: [],\n            stationName: ''\n        }\n    }\n\n    moveToHomePage() {\n        this.setState({\n            moveToHome: true\n        })\n    }\n\n    moveToHeatMapPage() {\n        this.setState({\n            moveToHeatMap: true\n        })\n    }\n\n    moveToCovidHeatMapPage() {\n        this.setState({\n            moveToCovidHeatMap: true\n        })\n    }\n\n    moveToDivvyTripsChartPage() {\n        this.setState({\n            moveToDivvyTripsChart: true\n        })\n    }\n\n    moveToRealTimeChartPage(key) {\n        let comp = this\n    \n        var axios = require('axios');\n        var data = JSON.stringify({\n        \"placeName\": key.stationName,\n        \"timeRange\": \"1 HOUR\"\n        });\n\n        var config = {\n        method: 'post',\n        url: 'http://localhost:4000/stations/getdocks',\n        headers: { \n            'Content-Type': 'application/json'\n        },\n        data : data\n        };\n\n        axios(config)\n        .then(function (response) {\n        console.log(JSON.stringify(response.data));\n        comp.setState({\n            realTimeChartData: response.data,\n            moveToRealTimeChart: true,\n            stationName: key.stationName\n        })\n        })\n        .catch(function (error) {\n        console.log(error);\n        });\n    }\n\n    moveToSmaChartPage(key) {\n        let comp = this\n    \n        var axios = require('axios');\n        var data = JSON.stringify({\n        \"placeName\": key.stationName,\n        \"timeRange\": \"1 HOUR\"\n        });\n\n        var config = {\n        method: 'post',\n        url: 'http://localhost:4000/stations/getdocks',\n        headers: { \n            'Content-Type': 'application/json'\n        },\n        data : data\n        };\n\n        axios(config)\n        .then(function (response) {\n        console.log(JSON.stringify(response.data));\n        let sma1 = movingAverage(response.data, 1)\n        let sma24 = movingAverage(sma1, 24)\n        comp.setState({\n            realTimeChartData: response.data,\n            moveToSmaChart: true,\n            sma1ChartData: sma1,\n            sma24ChartData: sma24,\n            stationName: key.stationName\n        })\n        })\n        .catch(function (error) {\n        console.log(error);\n        });\n    }\n\n    moveToPlacesPage() {\n        this.setState({\n            moveToPlace: true\n        })\n    }\n\n    renderMarkers = (map, maps) => {\n\n        let marker = new maps.Marker({\n           position: { lat: parseFloat(this.state.markerLatitude), lng: parseFloat(this.state.markerLongitude) },\n           map,\n           title: this.state.label\n        });\n        return marker;\n     };\n\n    render() {\n        const MapWithAMarkerClusterer = compose(\n            withProps({\n                googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyD7sSn5S_wx5HMwrbsGO4lpKAknoJqxfZA&v=3.exp&libraries=geometry,drawing,places\",\n                loadingElement: <div style={{ height: `100%` }} />,\n                containerElement: <div style={{ height: `100%` }} />,\n                mapElement: <div style={{ height: `100%` }} />,\n            }),\n            withScriptjs,\n            withGoogleMap\n        )(props =>\n            <GoogleMap\n                defaultZoom={13}\n                defaultCenter={{ lat: 41.882607, lng:  -87.643548 }}\n            >\n                {this.props.location.state.stations.map(marker => {\n                    //const onClick = props.onClick.bind(this, marker)\n                    return (\n                        <Marker\n                            key={marker.id}\n                            position={{ lat: marker.latitude, lng: marker.longitude }}\n                        >\n                            <InfoWindow>\n                                <div>\n                                    {marker.stationName}\n                                </div>\n                            </InfoWindow>\n                        </Marker>\n                    )\n                })}\n            </GoogleMap>\n        );\n        return (\n            <div>\n                {this.state.moveToHome? <Redirect to = \"/find\" />: null}\n                {this.state.moveToPlace? <Redirect to = {{\n                    pathname: \"/list_of_places\",\n                    state: { places: this.props.location.state.places, find: this.props.location.state.find, where: this.props.location.state.where}\n                }}\n                />: null}\n\n                {this.state.moveToHeatMap? <Redirect to = {{\n                    pathname: \"/heat_map\",\n                    state: { heatMapData: heatMapData, stations: this.props.location.state.stations, places: this.props.location.state.places, find: this.props.location.state.find, where: this.props.location.state.where} \n                }}\n                 />: null}\n\n\n                {this.state.moveToCovidHeatMap? <Redirect to = {{\n                    pathname: \"/covid_heat_map\",\n                    state: {covideHeatmapData: covideHeatmapData, stations: this.props.location.state.stations, places: this.props.location.state.places, find: this.props.location.state.find, where: this.props.location.state.where} \n                }}\n                 />: null}\n\n                {this.state.moveToDivvyTripsChart? <Redirect to = {{\n                    pathname: \"/divvy_trips_chart\",\n                    state: { stations: this.props.location.state.stations, places: this.props.location.state.places, find: this.props.location.state.find, where: this.props.location.state.where} \n                }}\n                 />: null}\n\n                {this.state.moveToRealTimeChart? <Redirect to = {{\n                    pathname: \"/real_time_chart\",\n                    state: { stationName: this.state.stationName, realTimeChartData: this.state.realTimeChartData, stations: this.props.location.state.stations, places: this.props.location.state.places, find: this.props.location.state.find, where: this.props.location.state.where} \n                }}\n                 />: null} \n\n                {this.state.moveToSmaChart? <Redirect to = {{\n                    pathname: \"/sma_chart\",\n                    state: { stationName: this.state.stationName, realTimeChartData: this.state.realTimeChartData, sma1ChartData: this.state.sma1ChartData, sma24ChartData: this.state.sma24ChartData,\n                        stations: this.props.location.state.stations, places: this.props.location.state.places, find: this.props.location.state.find, where: this.props.location.state.where} \n                }}\n                 />: null} \n\n\n                <Header />\n                <div style = {{textAlign: \"left\"}}>\n                    {/* <Form> */}\n                    <Row>\n                        <Col md = {2} style = {{padding: \"20px\"}}>\n                            <Button style = {{backgroundColor: \"#191970\"}} onClick = {this.moveToHomePage.bind(this)}>Home <span style = {{marginLeft: \"10px\"}}><FontAwesomeIcon icon = {faHome} /></span></Button>\n                        </Col>\n                        {/* <Col md = {1}></Col> */}\n                        <Col md = {3} style = {{padding: \"20px\"}}>\n                            <Button style = {{backgroundColor: \"#191970\"}} onClick = {this.moveToHeatMapPage.bind(this)}>Divvy Stations Heat Map <span style = {{marginLeft: \"10px\"}}><FontAwesomeIcon icon = {faBicycle} /></span></Button>\n                        </Col>\n                        <Col md = {2} style = {{padding: \"20px\"}}>\n                            <Button style = {{backgroundColor: \"#191970\"}} onClick = {this.moveToCovidHeatMapPage.bind(this)}>Covid-19 Heat Map <span style = {{marginLeft: \"10px\"}}></span></Button>\n                        </Col>\n                        <Col md = {3} style = {{padding: \"20px\"}}>\n                            <Button style = {{backgroundColor: \"#191970\"}} onClick = {this.moveToDivvyTripsChartPage.bind(this)}>Divvy Trips - Trends & Seasonality <span style = {{marginLeft: \"10px\"}}><FontAwesomeIcon icon = {faChartLine} /></span></Button>\n                        </Col>\n                        <Col md = {2} style = {{padding: \"20px\"}}>\n                            <Button style = {{backgroundColor: \"#191970\"}} onClick = {this.moveToPlacesPage.bind(this)}>Go Back <span style = {{marginLeft: \"10px\"}}><FontAwesomeIcon icon = {faArrowLeft} /></span></Button>\n                        </Col>\n                    </Row>\n\n                     <hr />\n                     <div>\n                        <Table bordered={false}>\n                            <thead>\n                                <tr>\n                                    <th>ID</th>\n                                    <th>Station Name</th>\n                                    <th>availableBikes</th>\n                                    <th>availableDocks</th>\n                                    <th>is_renting</th>\n                                    <th>lastCommunicationTime</th>\n                                    <th>Latitude</th>\n                                    <th>longitude</th>\n                                    <th>status</th>\n                                    <th>totalDocks</th>\n                                    <th></th>\n                                    <th></th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                            {this.props.location.state.stations.map((rowData, index) => (\n                                <tr>\n                                <td>{rowData.id}</td>\n                                <td>{rowData.stationName}</td>\n                                <td>{rowData.availableBikes}</td>\n                                <td>{rowData.availableDocks}</td>\n                                <td>{String(rowData.is_renting)}</td>\n                                <td>{rowData.lastCommunicationTime}</td>\n                                <td>{rowData.latitude}</td>\n                                <td>{rowData.longitude}</td>\n                                <td>{rowData.status}</td>\n                                <td>{rowData.totalDocks}</td>\n                                <td><Button style = {{backgroundColor: \"#191970\"}} size=\"sm\" onClick = {this.moveToRealTimeChartPage.bind(this, rowData)}>Real-Time Chart <span style = {{marginLeft: \"5px\"}}><FontAwesomeIcon icon = {faChartLine} /></span></Button></td>\n                                <td> <Button style = {{backgroundColor: \"#191970\"}} size=\"sm\" onClick = {this.moveToSmaChartPage.bind(this, rowData)}>SMA Chart <span style = {{marginLeft: \"10px\"}}><FontAwesomeIcon icon = {faChartLine} /></span></Button></td>\n                                </tr>\n                            ))}\n                            </tbody>\n                        </Table>\n                    </div>\n\n                    <Card className=\"w-full h-512 rounded-8 shadow-1\">\n                        <div style={{height: `400px`, width: '100%'}}>\n                            <MapWithAMarkerClusterer />\n                        </div>\n                     </Card>\n                        <hr />\n                    {/* </Form> */}\n                </div >\n            </div>\n\n        );\n    }\n}\n\nexport default (ListofStations);","/Users/vidyas/Downloads/IIT_Courses/Fall_2021/CSP_584_EWA/Assignments/Bonus_Assign_2/Bonus_Assignment_2_Sudharshana, Vidya/Chicago_SocialHub_React/frontend_react/src/components/realtimeChart.js",["81","82"],"import React, { Component } from \"react\";\nimport { Row, Col, Button, Input} from \"reactstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faArrowLeft, faChartBar, faHome } from \"@fortawesome/free-solid-svg-icons\";\nimport Header from \"./header\";\nimport { Table } from \"reactstrap\"\nimport {Redirect} from 'react-router-dom'\nimport { Line } from \"react-chartjs-2\";\n\n\n\n\nclass RealTimeChart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            moveToHome: false,\n            movetoStations: false,\n            stations: [],\n            data: {\n                labels: [\"Jan\", \"Feb\", \"March\"],\n                datasets: [\n                  {\n                    label: 'Real-Time Data',\n                    fill: false,\n                    lineTension: 0.1,\n                    data: [65, 59, 80],\n                    backgroundColor: 'rgb(255, 165, 0)',\n                    borderColor: 'rgba(255, 165, 0)',\n                  },\n                ],\n            },\n            hour: '1 HOUR'\n        }\n    }\n\n    componentDidMount() {\n        let comp = this\n        let data =  this.props.location.state.realTimeChartData\n\n        let labels = []\n        let availableDocks = []\n\n        for (let i=0; i< data.length; i++) {\n            labels.push(data[i].lastCommunicationTime.toString().substring(11, 19))\n            availableDocks.push(data[i].availableDocks)\n        }\n\n        labels.reverse()\n        availableDocks.reverse()\n\n        comp.setState({\n            data: {\n                labels: labels,\n                datasets: [\n                  {\n                    label: 'Real-Time Data',\n                    fill: false,\n                    lineTension: 0.1,\n                    data: availableDocks,\n                    backgroundColor: 'rgb(255, 165, 0)',\n                    borderColor: 'rgba(255, 165, 0)',\n                  },\n                ],\n            }\n        })\n    }\n\n    handleHourChange(e) {\n        const value = e.target.value\n\n        console.log(value)\n        let comp = this\n    \n        var axios = require('axios');\n        var data = JSON.stringify({\n        \"placeName\":this.props.location.state.stationName,\n        \"timeRange\": value\n        });\n\n        var config = {\n        method: 'post',\n        url: 'http://localhost:4000/stations/getdocks',\n        headers: { \n            'Content-Type': 'application/json'\n        },\n        data : data\n        };\n\n        axios(config)\n        .then(function (response) {\n        console.log(JSON.stringify(response.data));\n\n        let labels = []\n        let availableDocks = []\n\n        for (let i=0; i< response.data.length; i++) {\n            labels.push(response.data[i].lastCommunicationTime.toString().substring(11, 19))\n            availableDocks.push(response.data[i].availableDocks)\n        }\n\n        labels.reverse()\n        availableDocks.reverse()\n\n        comp.setState({\n            hour: value,\n            data: {\n                labels: labels,\n                datasets: [\n                  {\n                    label: 'Real-Time Data',\n                    fill: false,\n                    lineTension: 0.1,\n                    data: availableDocks,\n                    backgroundColor: 'rgb(255, 165, 0)',\n                    borderColor: 'rgba(255, 165, 0)',\n                  },\n                ],\n            }\n        })\n        })\n        .catch(function (error) {\n        console.log(error);\n        });\n    }\n\n    moveToHomePage() {\n        this.setState({\n            moveToHome: true\n        })\n    }\n\n    moveToListOfStations() {\n        this.setState({\n            movetoStations: true\n        })\n    }\n\n    handleChange(e) {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                {this.state.moveToHome? <Redirect to = \"/find\" />: null}\n                {this.state.movetoStations? <Redirect to = {{\n                    pathname: \"/list_of_stations\",\n                    state: { stations: this.props.location.state.stations, places: this.props.location.state.places, find: this.props.location.state.find, where: this.props.location.state.where} \n                }} \n                /> :null }\n                <Header />\n                <div style = {{textAlign: \"left\"}}>\n                    <Row>\n                        <Col md = {2} style = {{padding: \"20px\"}}>\n                            <Button style = {{backgroundColor: \"#191970\"}} onClick = {this.moveToHomePage.bind(this)}>Home<span style = {{marginLeft: \"10px\"}}><FontAwesomeIcon icon = {faHome} /></span></Button>\n                        </Col>\n                        <Col md = {8}></Col>\n                        <Col md = {2} style = {{padding: \"20px\"}}>\n                            <Button style = {{backgroundColor: \"#191970\"}} onClick = {this.moveToListOfStations.bind(this)}>Go Back <span style = {{marginLeft: \"10px\"}}><FontAwesomeIcon icon = {faArrowLeft} /></span></Button>\n                        </Col>\n                    </Row>\n\n                    <Row>\n                        <Col md = {2} style = {{padding: \"20px\"}}>\n                            <Input type = \"select\" value = {this.state.hour} style = {{border: \"none\", borderBottom: \"1px solid black\"}} name=\"hour\" onChange = {this.handleHourChange.bind(this)}  placeholder = \"Hour\">\n                                <option value = \"1 HOUR\">Past Hour</option>\n                                <option value = \"24 HOUR\">Last 24 Hours</option>\n                                <option value = \"7 DAY\">Last 7 Days</option>\n                            </Input>\n                        </Col>\n                    </Row>\n\n                     <div>\n                     <div style = {{padding: \"20px\"}}>\n                         <h6>Divvy Dock Station: {this.props.location.state.stationName}</h6>\n\n                    <Row>\n                        <Col md = {8} xs = {12}>\n                        <div>\n                            <Line\n                            data = {this.state.data}\n                            // Height of graph\n                            height={600}\n                            options={{\n                                maintainAspectRatio: false,\n                                scales: {\n                                yAxes: [\n                                    {\n                                        scaleLabel: {\n                                            display: true,\n                                            labelString: 'Available Docks'\n                                        },\n                                        ticks: {\n                                            beginAtZero: true,\n                                        },\n                                        gridLines: {\n                                            display: true\n                                        },\n                                    },\n                                    \n                                ],\n                                xAxes: [\n                                    {\n                                        scaleLabel: {\n                                            display: true,\n                                            labelString: 'Time'\n                                        },\n                                        gridLines: {\n                                            display: true\n                                        },\n                                    }\n                                ]\n                                },\n                                legend: {\n                                labels: {\n                                    fontSize: 15,\n                                },\n                                },\n                            }}\n                            />\n                        </div>\n                        </Col>\n                    </Row>\n                    \n                    </div>\n                    </div>\n                </div >\n            </div>\n\n        );\n    }\n}\n\nexport default (RealTimeChart);","/Users/vidyas/Downloads/IIT_Courses/Fall_2021/CSP_584_EWA/Assignments/Bonus_Assign_2/Bonus_Assignment_2_Sudharshana, Vidya/Chicago_SocialHub_React/frontend_react/src/components/heatmap.js",["83","84","85","86"],"import React, { Component } from \"react\";\nimport { Row, Col, Button, Input, Card} from \"reactstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faArrowLeft, faChartBar, faHome } from \"@fortawesome/free-solid-svg-icons\";\nimport Header from \"./header\";\nimport {Redirect} from 'react-router-dom'\nimport { Map, GoogleApiWrapper, HeatMap } from \"google-maps-react\";\n\n\nclass HeatMapChart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            moveToHome: false,\n            movetoStations: false,\n            stations: [],\n            data: [],   \n            gradient: [],  \n            center: {\n                lat: 41.882607, \n                lng:  -87.643548\n            }\n        }\n    }\n\n    componentDidMount() {\n        let comp = this\n\n        var axios = require('axios');\n        var data1 = JSON.stringify({\n          \"timeRange\": \"Past Hour\",\n          \"newTimeRangeSelection\": false\n        });\n        \n        var config = {\n          method: 'post',\n          url: 'http://localhost:4000/stations/fetch_all_divvy_stations_data',\n          headers: { \n            'Content-Type': 'application/json'\n          },\n          data : data1\n        };\n        \n        axios(config)\n        .then(function (response) {\n          console.log(JSON.stringify(response.data));\n\n          let gradient = []\n          let heatmapData = []\n                  for(let i=0; i< response.data.length; i++) {\n                    //   const heatMapDict = {\n                    //       lat: response.data[i].latitude,\n                    //       lng: response.data[i].longitude\n                    //   }\n                    const heatMapDict = {\n                      lat: response.data[i].latitude, \n                      lng: response.data[i].longitude,\n                      weight: response.data[i].availableDocks\n                    }\n                      heatmapData.push(heatMapDict)\n                  }\n  \n                  comp.setState({\n                      data: heatmapData,\n                      \n                    //   gradient: gradient\n                  })\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n        \n\n    }\n\n    moveToListOfStations() {\n        this.setState({\n            movetoStations: true\n        })\n    }\n\n    handleChange(e) {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n    render() {\n        {console.log(\"heat map\",this.state.data)}\n        const gradient = [\n            \"rgba(0, 255, 255, 0)\",\n            \"rgba(0, 255, 255, 1)\",\n            \"rgba(0, 191, 255, 1)\",\n            \"rgba(0, 127, 255, 1)\",\n            \"rgba(0, 63, 255, 1)\",\n            \"rgba(0, 0, 255, 1)\",\n            \"rgba(0, 0, 223, 1)\",\n            \"rgba(0, 0, 191, 1)\",\n            \"rgba(0, 0, 159, 1)\",\n            \"rgba(0, 0, 127, 1)\",\n            \"rgba(63, 0, 91, 1)\",\n            \"rgba(127, 0, 63, 1)\",\n            \"rgba(191, 0, 31, 1)\",\n            \"rgba(255, 0, 0, 1)\"\n          ];\n        return (\n            <div>\n                {this.state.movetoStations? <Redirect to = {{\n                    pathname: \"/list_of_stations\",\n                    state: { stations: this.props.location.state.stations, places: this.props.location.state.places, find: this.props.location.state.find, where: this.props.location.state.where} \n                }} \n                /> :null }\n                <Header />\n                <div style = {{textAlign: \"left\"}}>\n                    <Row>\n                        <Col md = {10}></Col>\n                        <Col md = {2} style = {{padding: \"20px\"}}>\n                            <Button style = {{backgroundColor: \"#191970\"}} onClick = {this.moveToListOfStations.bind(this)}>Go Back <span style = {{marginLeft: \"10px\"}}><FontAwesomeIcon icon = {faArrowLeft} /></span></Button>\n                        </Col>\n                    </Row>\n\n                    <Row>\n                        <Col md = {2} style = {{padding: \"20px\"}}> Time Range\n                            <Input type = \"select\" style = {{border: \"none\", borderBottom: \"1px solid black\"}} name=\"find\" onChange = {this.handleChange.bind(this)}  placeholder = \"Find\">\n                                <option value = \"PAST HOUR\">Past Hour</option>\n                                <option value = \"LAST 24 HOURS\">Last 24 Hours</option>\n                                <option value = \"LAST 7 DAYS\">Last 7 Days</option>\n                            </Input>\n                        </Col>\n                    </Row>\n\n\n                     <div style = {{padding: \"20px\"}}>\n                     <Card className=\"w-full h-512 rounded-8 shadow-1\">\n                        <div style={{height: `400px`, width: '100%'}}>\n                        <Map\n                            google={this.props.google}\n                            className={\"map\"}\n                            zoom={8}\n                            initialCenter={this.state.center}\n                            onReady={this.handleMapReady}\n                            >\n                            <HeatMap\n                                gradient={gradient}\n                                //positions={this.props.location.state.heatMapData}\n                                positions={this.props.location.state.heatMapData}\n                                opacity={1}\n                                radius={20}\n                            />\n                            </Map>\n                        </div>\n                     </Card>\n                    \n                    </div>\n                    </div>\n                </div >\n\n        );\n    }\n}\n\nexport default GoogleApiWrapper({\n    apiKey: \"AIzaSyD7sSn5S_wx5HMwrbsGO4lpKAknoJqxfZA\",\n    libraries: [\"visualization\"]\n  })(HeatMapChart);\n\n","/Users/vidyas/Downloads/IIT_Courses/Fall_2021/CSP_584_EWA/Assignments/Bonus_Assign_2/Bonus_Assignment_2_Sudharshana, Vidya/Chicago_SocialHub_React/frontend_react/src/components/divvyTripsChart.js",["87","88","89","90","91","92","93","94","95"],"import React, { Component } from \"react\";\nimport { Row, Col, Button, Input} from \"reactstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faArrowLeft, faChartBar, faHome } from \"@fortawesome/free-solid-svg-icons\";\nimport Header from \"./header\";\nimport { Table } from \"reactstrap\"\nimport {Redirect} from 'react-router-dom'\nimport { Bar } from \"react-chartjs-2\";\nimport Loader from 'react-loader-spinner'\n\n\n\n\nclass DivvyTripsChart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            moveToHome: false,\n            movetoStations: false,\n            startDate: '2018-10-08',\n            endDate: '2018-10-14',\n            loader: false,\n            stations: [],\n            data1: {\n                labels: [],\n                datasets: [\n                  {\n                    label: 'Monday',\n                    data: [],\n                    backgroundColor: 'rgb(60, 179, 113)',\n                  }\n                ],\n            },\n            data2: {\n                labels: [],\n                datasets: [\n                  {\n                    label: 'Tuesday',\n                    data: [],\n                    backgroundColor: 'rgb(60, 179, 113)',\n                  }\n                ],\n            },\n            data3: {\n                labels: [],\n                datasets: [\n                  {\n                    label: 'Wednesday',\n                    data: [],\n                    backgroundColor: 'rgb(60, 179, 113)',\n                  }\n                ],\n            },\n            data4: {\n                labels: [],\n                datasets: [\n                  {\n                    label: 'Thursday',\n                    data: [],\n                    backgroundColor: 'rgb(60, 179, 113)',\n                  }\n                ],\n            },\n            data5: {\n                labels: [],\n                datasets: [\n                  {\n                    label: 'Friday',\n                    data: [],\n                    backgroundColor: 'rgb(60, 179, 113)',\n                  }\n                ],\n            },\n            data6: {\n                labels: [],\n                datasets: [\n                  {\n                    label: 'Saturday',\n                    data: [],\n                    backgroundColor: 'rgb(60, 179, 113)',\n                  }\n                ],\n            },\n            data7: {\n                labels: [],\n                datasets: [\n                  {\n                    label: 'Sunday',\n                    data: [],\n                    backgroundColor: 'rgb(60, 179, 113)',\n                  }\n                ],\n            },\n            options: {\n                maintainAspectRatio: false,\n                scales: {\n                yAxes: [\n                    {\n                        scaleLabel: {\n                            display: true,\n                            labelString: 'Divvy Trips'\n                        },\n                        ticks: {\n                            beginAtZero: true,\n                        },\n                    },\n                    \n                ],\n                xAxes: [\n                    {\n                        scaleLabel: {\n                            display: true,\n                            labelString: 'Time'\n                        },\n                        barPercentage: 0.5\n                    }\n                ]\n                },\n                legend: {\n                labels: {\n                    fontSize: 15,\n                },\n                },\n            }\n        }\n    }\n    componentDidMount(){\n        let comp = this\n        var axios = require('axios');\n\n         /* Monday*/\n         var day1 = JSON.stringify({\n            \"day\": 1,\n            \"selectedDate\": \"2018-10-01T00:00:00.000Z\"\n            });\n    \n            var config = {\n            method: 'post',\n            url: 'http://localhost:4000/countDivvyTripsPerDay',\n            headers: { \n                'Content-Type': 'application/json'\n            },\n            data : day1\n            };\n    \n            axios(config)\n            .then(function (response) {\n            console.log(JSON.stringify(response.data));\n            if(response.data.MONDAY === \"Successfully Retrieved\") {\n                    var axios = require('axios');\n                    let data1label = []\n                    let data1Value = []\n                    var config = {\n                    method: 'get',\n                    url: 'http://localhost:4000/getDivvyTripsCountsForMonday',\n                    headers: { }\n                    };\n    \n                    axios(config)\n                    .then(function (response) {\n                    //console.log(JSON.stringify(response.data));\n                    for (let i = 0; i<response.data.length; i++){\n                        data1label.push(response.data[i].hour_timestamp)\n                        data1Value.push(response.data[i].total_trips)\n                    }\n                    comp.setState({ \n                        data1: {\n                            labels: data1label,\n                            datasets: [\n                              {\n                                label: 'Monday',\n                                data: data1Value,\n                                backgroundColor: 'rgb(60, 179, 113)',\n                              }\n                            ],\n                        },\n                    })\n                    })\n                    .catch(function (error) {\n                    console.log(error);\n                    });\n            }\n            })\n            .catch(function (error) {\n            console.log(error);\n            });\n\n            // TUESDAY\n        var day2 = JSON.stringify({\n        \"day\": 2,\n        \"selectedDate\": \"2018-10-02T00:00:00.000Z\"\n        });\n\n        var config = {\n        method: 'post',\n        url: 'http://localhost:4000/countDivvyTripsPerDay',\n        headers: { \n            'Content-Type': 'application/json'\n        },\n        data : day2\n        };\n\n        axios(config)\n        .then(function (response) {\n        console.log(JSON.stringify(response.data));\n        if(response.data.TUESDAY === \"Successfully Retrieved\") {\n                var axios = require('axios');\n                let data2label = []\n                let data2Value = []\n                var config = {\n                method: 'get',\n                url: 'http://localhost:4000/getDivvyTripsCountsForTuesday',\n                headers: { }\n                };\n\n                axios(config)\n                .then(function (response) {\n                //console.log(JSON.stringify(response.data));\n                for (let i = 0; i<response.data.length; i++){\n                    data2label.push(response.data[i].hour_timestamp)\n                    data2Value.push(response.data[i].total_trips)\n                }\n                comp.setState({ \n                    data2: {\n                        labels: data2label,\n                        datasets: [\n                          {\n                            label: 'Tuesday',\n                            data: data2Value,\n                            backgroundColor: 'rgb(60, 179, 113)',\n                          }\n                        ],\n                    },\n                })\n                })\n                .catch(function (error) {\n                console.log(error);\n                });\n        }\n        })\n        .catch(function (error) {\n        console.log(error);\n        });\n\n        // wednesday\n        var day3= JSON.stringify({\n            \"day\": 3,\n            \"selectedDate\": \"2018-10-03T00:00:00.000Z\"\n            });\n    \n            var config = {\n            method: 'post',\n            url: 'http://localhost:4000/countDivvyTripsPerDay',\n            headers: { \n                'Content-Type': 'application/json'\n            },\n            data : day3\n            };\n    \n            axios(config)\n            .then(function (response) {\n            console.log(JSON.stringify(response.data));\n            if(response.data.WEDNESDAY === \"Successfully Retrieved\") {\n                    var axios = require('axios');\n                    let data2label = []\n                    let data2Value = []\n                    var config = {\n                    method: 'get',\n                    url: 'http://localhost:4000/getDivvyTripsCountsForWednesday',\n                    headers: { }\n                    };\n    \n                    axios(config)\n                    .then(function (response) {\n                    //console.log(JSON.stringify(response.data));\n                    for (let i = 0; i<response.data.length; i++){\n                        data2label.push(response.data[i].hour_timestamp)\n                        data2Value.push(response.data[i].total_trips)\n                    }\n                    comp.setState({ \n                        data3: {\n                            labels: data2label,\n                            datasets: [\n                              {\n                                label: 'Wednesday',\n                                data: data2Value,\n                                backgroundColor: 'rgb(60, 179, 113)',\n                              }\n                            ],\n                        },\n                    })\n                    })\n                    .catch(function (error) {\n                    console.log(error);\n                    });\n            }\n            })\n            .catch(function (error) {\n            console.log(error);\n            });\n    \n            // THURSDAY\n\n            var day4 = JSON.stringify({\n                \"day\": 4,\n                \"selectedDate\": \"2018-10-04T00:00:00.000Z\"\n                });\n        \n                var config = {\n                method: 'post',\n                url: 'http://localhost:4000/countDivvyTripsPerDay',\n                headers: { \n                    'Content-Type': 'application/json'\n                },\n                data : day4\n                };\n        \n                axios(config)\n                .then(function (response) {\n                console.log(JSON.stringify(response.data));\n                if(response.data.THURSDAY === \"Successfully Retrieved\") {\n                        var axios = require('axios');\n                        let data2label = []\n                        let data2Value = []\n                        var config = {\n                        method: 'get',\n                        url: 'http://localhost:4000/getDivvyTripsCountsForThursday',\n                        headers: { }\n                        };\n        \n                        axios(config)\n                        .then(function (response) {\n                        //console.log(JSON.stringify(response.data));\n                        for (let i = 0; i<response.data.length; i++){\n                            data2label.push(response.data[i].hour_timestamp)\n                            data2Value.push(response.data[i].total_trips)\n                        }\n                        comp.setState({ \n                            data4: {\n                                labels: data2label,\n                                datasets: [\n                                  {\n                                    label: 'Thursday',\n                                    data: data2Value,\n                                    backgroundColor: 'rgb(60, 179, 113)',\n                                  }\n                                ],\n                            },\n                        })\n                        })\n                        .catch(function (error) {\n                        console.log(error);\n                        });\n                }\n                })\n                .catch(function (error) {\n                console.log(error);\n                });\n        \n    //    FRIDAY\n\n    var day5= JSON.stringify({\n        \"day\": 5,\n        \"selectedDate\": \"2018-10-05T00:00:00.000Z\"\n        });\n\n        var config = {\n        method: 'post',\n        url: 'http://localhost:4000/countDivvyTripsPerDay',\n        headers: { \n            'Content-Type': 'application/json'\n        },\n        data : day5\n        };\n\n        axios(config)\n        .then(function (response) {\n        console.log(JSON.stringify(response.data));\n        if(response.data.FRIDAY === \"Successfully Retrieved\") {\n                var axios = require('axios');\n                let data2label = []\n                let data2Value = []\n                var config = {\n                method: 'get',\n                url: 'http://localhost:4000/getDivvyTripsCountsForFriday',\n                headers: { }\n                };\n\n                axios(config)\n                .then(function (response) {\n                //console.log(JSON.stringify(response.data));\n                for (let i = 0; i<response.data.length; i++){\n                    data2label.push(response.data[i].hour_timestamp)\n                    data2Value.push(response.data[i].total_trips)\n                }\n                comp.setState({ \n                    data5: {\n                        labels: data2label,\n                        datasets: [\n                          {\n                            label: 'Friday',\n                            data: data2Value,\n                            backgroundColor: 'rgb(60, 179, 113)',\n                          }\n                        ],\n                    },\n                })\n                })\n                .catch(function (error) {\n                console.log(error);\n                });\n        }\n        })\n        .catch(function (error) {\n        console.log(error);\n        });\n\n        // SATURDAY\n\n        var day6= JSON.stringify({\n            \"day\": 6,\n            \"selectedDate\": \"2018-10-06T00:00:00.000Z\"\n            });\n    \n            var config = {\n            method: 'post',\n            url: 'http://localhost:4000/countDivvyTripsPerDay',\n            headers: { \n                'Content-Type': 'application/json'\n            },\n            data : day6\n            };\n    \n            axios(config)\n            .then(function (response) {\n            console.log(JSON.stringify(response.data));\n            if(response.data.SATURDAY === \"Successfully Retrieved\") {\n                    var axios = require('axios');\n                    let data2label = []\n                    let data2Value = []\n                    var config = {\n                    method: 'get',\n                    url: 'http://localhost:4000/getDivvyTripsCountsForSATURDAY',\n                    headers: { }\n                    };\n    \n                    axios(config)\n                    .then(function (response) {\n                    //console.log(JSON.stringify(response.data));\n                    for (let i = 0; i<response.data.length; i++){\n                        data2label.push(response.data[i].hour_timestamp)\n                        data2Value.push(response.data[i].total_trips)\n                    }\n                    comp.setState({ \n                        data6: {\n                            labels: data2label,\n                            datasets: [\n                              {\n                                label: 'Saturday',\n                                data: data2Value,\n                                backgroundColor: 'rgb(60, 179, 113)',\n                              }\n                            ],\n                        },\n                    })\n                    })\n                    .catch(function (error) {\n                    console.log(error);\n                    });\n            }\n            })\n            .catch(function (error) {\n            console.log(error);\n            });\n    \n            // SUNDAY\n\n            var day7 = JSON.stringify({\n                \"day\": 0,\n                \"selectedDate\": \"2018-10-07T00:00:00.000Z\"\n                });\n        \n                var config = {\n                method: 'post',\n                url: 'http://localhost:4000/countDivvyTripsPerDay',\n                headers: { \n                    'Content-Type': 'application/json'\n                },\n                data : day7\n                };\n        \n                axios(config)\n                .then(function (response) {\n                console.log(JSON.stringify(response.data));\n                if(response.data.SUNDAY === \"Successfully Retrieved\") {\n                        var axios = require('axios');\n                        let data2label = []\n                        let data2Value = []\n                        var config = {\n                        method: 'get',\n                        url: 'http://localhost:4000/getDivvyTripsCountsSunday',\n                        headers: { }\n                        };\n        \n                        axios(config)\n                        .then(function (response) {\n                        //console.log(JSON.stringify(response.data));\n                        for (let i = 0; i<response.data.length; i++){\n                            data2label.push(response.data[i].hour_timestamp)\n                            data2Value.push(response.data[i].total_trips)\n                        }\n                        comp.setState({ \n                            data7: {\n                                labels: data2label,\n                                datasets: [\n                                  {\n                                    label: 'Sunday',\n                                    data: data2Value,\n                                    backgroundColor: 'rgb(60, 179, 113)',\n                                  }\n                                ],\n                            },\n                        })\n                        })\n                        .catch(function (error) {\n                        console.log(error);\n                        });\n                }\n                })\n                .catch(function (error) {\n                console.log(error);\n                });\n        \n\n    }\n\n    moveToHomePage() {\n        this.setState({\n            moveToHome: true\n        })\n    }\n\n    moveToListOfStations() {\n        this.setState({\n            movetoStations: true\n        })\n    }\n\n    handleChange(e) {\n        let comp = this\n        this.setState({\n            [e.target.name]: e.target.value,\n            loader: true\n        })\n\n        setTimeout(function() {\n            comp.setState({\n                loader: false\n            })\n        }, 1000)\n    }\n\n    render() {\n        return (\n            <div>\n                {this.state.moveToHome? <Redirect to = \"/find\" />: null}\n                {this.state.movetoStations? <Redirect to = {{\n                    pathname: \"/list_of_stations\",\n                    state: { stations: this.props.location.state.stations, places: this.props.location.state.places, find: this.props.location.state.find, where: this.props.location.state.where} \n                }} \n                /> :null }\n                <Header />\n                {this.state.loader ?\n                <Loader \n                type=\"Bars\" \n                color=\"black\" \n                height={80} \n                width={80}\n                timeout={5000}\n                style = {{position: \"fixed\", top: \"50%\", left: \"50%\", transform: \"translate(-50%, -50%)\" }}\n             /> : null }\n                <div style = {{textAlign: \"left\"}}>\n                    <Row>\n                        <Col md = {10}></Col>\n                        <Col md = {2} style = {{padding: \"20px\"}}>\n                            <Button style = {{backgroundColor: \"#191970\"}} onClick = {this.moveToListOfStations.bind(this)}>Go Back <span style = {{marginLeft: \"10px\"}}><FontAwesomeIcon icon = {faArrowLeft} /></span></Button>\n                        </Col>\n                    </Row>\n\n                    <h6 style = {{textAlign: \"center\"}}>Choose a week</h6>\n\n\n                    <Row>\n                        <Col md = {4}></Col>\n                        <Col md = {2} style = {{padding: \"20px\"}}>\n                            <Input type = \"date\" value = {this.state.startDate} style = {{border: \"none\", borderBottom: \"1px solid black\"}} name=\"startDate\" onChange = {this.handleChange.bind(this)} />\n                        </Col>\n                        <Col md = {2} style = {{padding: \"20px\"}}>\n                            <Input type = \"date\" value = {this.state.endDate} style = {{border: \"none\", borderBottom: \"1px solid black\"}} name=\"endDate\" onChange = {this.handleChange.bind(this)} />\n                        </Col>\n                    </Row>\n\n                     <div>\n                     <div style = {{padding: \"20px\"}}>\n                    <Row>\n                        <Col md = {2}></Col>\n                        <Col md = {4} xs = {4}>\n                        <Bar\n                            data = {this.state.data1}\n                            height={300}\n                            options={this.state.options}\n                            />\n                        </Col>\n                        <Col md = {4} xs = {4}>\n                        <Bar\n                            data = {this.state.data2}\n                            height={300}\n                            options={this.state.options}\n                            />\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col md = {2}></Col>\n                        <Col md = {4} xs = {4}>\n                        <Bar\n                            data = {this.state.data3}\n                            height={300}\n                            options={this.state.options}\n                            />\n                        </Col>\n                        <Col md = {4} xs = {4}>\n                        <Bar\n                            data = {this.state.data4}\n                            height={300}\n                            options={this.state.options}\n                            />\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col md = {2}></Col>\n                        <Col md = {4} xs = {4}>\n                        <Bar\n                            data = {this.state.data5}\n                            height={300}\n                            options={this.state.options}\n                            />\n                        </Col>\n                        <Col md = {4} xs = {4}>\n                        <Bar\n                            data = {this.state.data6}\n                            height={300}\n                            options={this.state.options}\n                            />\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col md = {2}></Col>\n                        <Col md = {4} xs = {4}>\n                        <Bar\n                            data = {this.state.data7}\n                            height={300}\n                            options={this.state.options}\n                            />\n                        </Col>\n                    </Row>\n                    \n                    </div>\n                    </div>\n                </div >\n            </div>\n\n        );\n    }\n}\n\nexport default (DivvyTripsChart);","/Users/vidyas/Downloads/IIT_Courses/Fall_2021/CSP_584_EWA/Assignments/Bonus_Assign_2/Bonus_Assignment_2_Sudharshana, Vidya/Chicago_SocialHub_React/frontend_react/src/components/yelpReviewChart.js",["96","97","98"],"import React, { Component } from \"react\";\nimport { Row, Col, Button} from \"reactstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faArrowLeft, faChartBar, faHome } from \"@fortawesome/free-solid-svg-icons\";\nimport Header from \"./header\";\nimport { Table } from \"reactstrap\"\nimport {Redirect} from 'react-router-dom'\nimport { Bar } from \"react-chartjs-2\";\n\n\n\n\nclass YelpReviewChart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            moveToHome: false,\n            movetoStations: false,\n            stations: [],\n            data: {\n                labels: [],\n                datasets: [\n                  {\n                    label: 'Count',\n                    data: [],\n                    backgroundColor: 'rgb(60, 179, 113)',\n                  }\n                ],\n            }\n        }\n    }\n\n    componentDidMount() {\n        console.log(this.props.location.state.places)\n\n        let comp = this\n        let data = this.props.location.state.places\n\n        let labels = []\n        let dataCount = []\n\n        for(let i=0; i< data.length; i++) {\n            labels.push(data[i].name)\n            dataCount.push(data[i].review_count)\n        }\n\n        comp.setState({\n            data: {\n                labels: labels,\n                datasets: [\n                  {\n                    label: 'Count',\n                    data: dataCount,\n                    backgroundColor: 'rgb(60, 179, 113)',\n                  }\n                ],\n            }\n        })\n    }\n\n    moveToHomePage() {\n        this.setState({\n            moveToHome: true\n        })\n    }\n\n    \n\n    render() {\n        return (\n            <div>\n                {this.state.moveToHome? <Redirect to = {{\n                    pathname: \"/list_of_places\",\n                    state: { places: this.props.location.state.places, find: this.props.location.state.find, where: this.props.location.state.where}\n                }}\n                />: null}\n                <Header />\n                <div style = {{textAlign: \"left\"}}>\n                    <Row>\n                        <Col md = {10}></Col>\n                        <Col md = {2} style = {{padding: \"20px\"}}>\n                            <Button style = {{backgroundColor: \"#191970\"}} onClick = {this.moveToHomePage.bind(this)}>Go Back <span style = {{marginLeft: \"10px\"}}><FontAwesomeIcon icon = {faArrowLeft} /></span></Button>\n                        </Col>\n                    </Row>\n\n                     <div>\n                     <div style = {{padding: \"20px\"}}>\n                         <h4>Yelp Reviews Chart</h4>\n\n                    <Row>\n                        <Col md = {8} xs = {12}>\n                        <div>\n        <Bar\n          data = {this.state.data}\n          // Height of graph\n          height={600}\n          options={{\n            maintainAspectRatio: false,\n            scales: {\n              yAxes: [\n                {\n                    scaleLabel: {\n                        display: true,\n                        labelString: 'Yelp Reviews Count'\n                      },\n                    ticks: {\n                        beginAtZero: true,\n                    },\n                },\n                \n              ],\n              xAxes: [\n                  {\n                    scaleLabel: {\n                        display: true,\n                        labelString: 'Name'\n                      },\n                    barPercentage: 0.3\n                  }\n              ]\n            },\n            legend: {\n              labels: {\n                fontSize: 15,\n              },\n            },\n          }}\n        />\n      </div>\n                        </Col>\n                    </Row>\n                    \n                    </div>\n                    </div>\n                        {/* <hr /> */}\n                    {/* </Form> */}\n                </div >\n            </div>\n\n        );\n    }\n}\n\nexport default (YelpReviewChart);","/Users/vidyas/Downloads/IIT_Courses/Fall_2021/CSP_584_EWA/Assignments/Bonus_Assign_2/Bonus_Assignment_2_Sudharshana, Vidya/Chicago_SocialHub_React/frontend_react/src/components/header.js",[],"/Users/vidyas/Downloads/IIT_Courses/Fall_2021/CSP_584_EWA/Assignments/Bonus_Assign_2/Bonus_Assignment_2_Sudharshana, Vidya/Chicago_SocialHub_React/frontend_react/src/components/covideHeatMap.js",["99","100","101"],{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","severity":1,"message":"107","line":4,"column":23,"nodeType":"108","messageId":"109","endLine":4,"endColumn":33},{"ruleId":"106","severity":1,"message":"110","line":6,"column":10,"nodeType":"108","messageId":"109","endLine":6,"endColumn":15},{"ruleId":"111","severity":1,"message":"112","line":12,"column":34,"nodeType":"113","messageId":"114","endLine":12,"endColumn":36},{"ruleId":"115","severity":1,"message":"116","line":27,"column":34,"nodeType":"117","messageId":"118","endLine":27,"endColumn":36},{"ruleId":"115","severity":1,"message":"116","line":34,"column":35,"nodeType":"117","messageId":"118","endLine":34,"endColumn":37},{"ruleId":"119","severity":1,"message":"120","line":126,"column":21,"nodeType":"121","messageId":"118","endLine":126,"endColumn":36},{"ruleId":"106","severity":1,"message":"122","line":4,"column":23,"nodeType":"108","messageId":"109","endLine":4,"endColumn":32},{"ruleId":"111","severity":1,"message":"112","line":67,"column":34,"nodeType":"113","messageId":"114","endLine":67,"endColumn":36},{"ruleId":"115","severity":1,"message":"116","line":82,"column":34,"nodeType":"117","messageId":"118","endLine":82,"endColumn":36},{"ruleId":"115","severity":1,"message":"116","line":89,"column":35,"nodeType":"117","messageId":"118","endLine":89,"endColumn":37},{"ruleId":"106","severity":1,"message":"107","line":4,"column":23,"nodeType":"108","messageId":"109","endLine":4,"endColumn":33},{"ruleId":"106","severity":1,"message":"110","line":6,"column":10,"nodeType":"108","messageId":"109","endLine":6,"endColumn":15},{"ruleId":"106","severity":1,"message":"107","line":4,"column":23,"nodeType":"108","messageId":"109","endLine":4,"endColumn":33},{"ruleId":"106","severity":1,"message":"123","line":4,"column":35,"nodeType":"108","messageId":"109","endLine":4,"endColumn":41},{"ruleId":"106","severity":1,"message":"124","line":48,"column":15,"nodeType":"108","messageId":"109","endLine":48,"endColumn":23},{"ruleId":"125","severity":1,"message":"126","line":89,"column":9,"nodeType":"127","messageId":"128","endLine":89,"endColumn":50},{"ruleId":"106","severity":1,"message":"107","line":4,"column":23,"nodeType":"108","messageId":"109","endLine":4,"endColumn":33},{"ruleId":"106","severity":1,"message":"123","line":4,"column":35,"nodeType":"108","messageId":"109","endLine":4,"endColumn":41},{"ruleId":"106","severity":1,"message":"110","line":6,"column":10,"nodeType":"108","messageId":"109","endLine":6,"endColumn":15},{"ruleId":"129","severity":1,"message":"130","line":194,"column":13,"nodeType":"108","messageId":"131","endLine":194,"endColumn":19},{"ruleId":"129","severity":1,"message":"130","line":251,"column":17,"nodeType":"108","messageId":"131","endLine":251,"endColumn":23},{"ruleId":"129","severity":1,"message":"130","line":309,"column":21,"nodeType":"108","messageId":"131","endLine":309,"endColumn":27},{"ruleId":"129","severity":1,"message":"130","line":367,"column":13,"nodeType":"108","messageId":"131","endLine":367,"endColumn":19},{"ruleId":"129","severity":1,"message":"130","line":425,"column":17,"nodeType":"108","messageId":"131","endLine":425,"endColumn":23},{"ruleId":"129","severity":1,"message":"130","line":483,"column":21,"nodeType":"108","messageId":"131","endLine":483,"endColumn":27},{"ruleId":"106","severity":1,"message":"107","line":4,"column":23,"nodeType":"108","messageId":"109","endLine":4,"endColumn":33},{"ruleId":"106","severity":1,"message":"123","line":4,"column":35,"nodeType":"108","messageId":"109","endLine":4,"endColumn":41},{"ruleId":"106","severity":1,"message":"110","line":6,"column":10,"nodeType":"108","messageId":"109","endLine":6,"endColumn":15},{"ruleId":"106","severity":1,"message":"107","line":4,"column":23,"nodeType":"108","messageId":"109","endLine":4,"endColumn":33},{"ruleId":"106","severity":1,"message":"123","line":4,"column":35,"nodeType":"108","messageId":"109","endLine":4,"endColumn":41},{"ruleId":"106","severity":1,"message":"124","line":49,"column":15,"nodeType":"108","messageId":"109","endLine":49,"endColumn":23},"no-native-reassign",["132"],"no-negated-in-lhs",["133"],"no-unused-vars","'faChartBar' is defined but never used.","Identifier","unusedVar","'Table' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-dupe-keys","Duplicate key 'backgroundColor'.","ObjectExpression","'faArrowUp' is defined but never used.","'faHome' is defined but never used.","'gradient' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-redeclare","'config' is already defined.","redeclared","no-global-assign","no-unsafe-negation"]